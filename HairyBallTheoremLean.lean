import Mathlib.Topology.MetricSpace.PseudoMetric
import Mathlib.Topology.Basic
import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.Analysis.Calculus.ContDiff.Defs
import Mathlib.Analysis.Calculus.ContDiff.RCLike
import Mathlib.Analysis.Calculus.FDeriv.Add
import Mathlib.Topology.Category.CompHaus.Basic
import Mathlib.MeasureTheory.Measure.Lebesgue.Basic
import Mathlib.MeasureTheory.Integral.Lebesgue
import Mathlib.Topology.ContinuousFunction.Polynomial
import Mathlib.MeasureTheory.Function.Jacobian
import Mathlib.Analysis.NormedSpace.Connected
import Mathlib.LinearAlgebra.Dimension.Finrank
import Mathlib.Analysis.Calculus.InverseFunctionTheorem.FDeriv
-- import Mathlib.Algebra.BigOperators.Group.Finset

set_option autoImplicit false



variable (n : ‚Ñï) (n_pos : 0 < n)

abbrev E := EuclideanSpace ‚Ñù (Fin n)
abbrev unitSphere := Metric.sphere (0 : E n) 1

/- structure ?-/
structure IsVectorFieldOnSn (v : E n ‚Üí E n) where
  isCont : Continuous v
  isTang : ‚àÄ x : E n, x ‚àà unitSphere n ‚Üí ‚ü™x, (v x)‚ü´_‚Ñù = 0



section

variable (v : E n ‚Üí E n) (hv : IsVectorFieldOnSn n v)
  {vContDiff : ContDiff ‚Ñù 1 v}
  {vUnit : ‚àÄ x : E n, ‚Äñv x‚Äñ = ‚Äñx‚Äñ}
  {A : Set (E n)} (AComp : IsCompact A)

instance instComp : CompactSpace (A : Type) :=
  isCompact_iff_compactSpace.1 AComp

local notation "f" => fun (t : ‚Ñù) (x : E n) ‚Ü¶ x + t ‚Ä¢ (v x)

open Topology

variable {v}

lemma measurable_ft : ‚àÄ t, Measurable (f t) :=
  fun _ => measurable_id.add (measurable_const.smul hv.isCont.measurable)

/- v est lipschitzienne sur A -/
lemma vLip : ‚àÉ c > 0, LipschitzOnWith c v A := by
  sorry

lemma ftx_eq_fty (t : ‚Ñù) {x y : E n} {hx : x ‚àà A} {hy : y ‚àà A} (h : f t x = f t y) : x - y = t ‚Ä¢ (v y - v x) := by
  sorry

lemma eq_zero_of_le_self {Œ± t : ‚Ñù} (ht : |t| < 1) (h : Œ± ‚â§ |t| * Œ±) : Œ± = 0 := by
  sorry

/- f t est injectif sur A pour t assez petit -/
lemma InjOn_A_ft : ‚àÄ·∂† t in ùìù 0, A.InjOn (f t) := by
  let ‚ü®c, cpos, hc‚ü© := @vLip n v A
  rw [eventually_nhds_iff]
  use (Metric.ball 0 c‚Åª¬π)
  simp
  refine ‚ü®fun t ht x hx y hy hxy => ?_, Metric.isOpen_ball, by assumption‚ü©
  apply sub_eq_zero.1
  apply norm_eq_zero.1
  apply eq_zero_of_le_self (t := c * |t|)
  ¬∑ rw [abs_mul, abs_abs, abs_eq_self.2 cpos.le]
    apply (@mul_lt_mul_left _ c‚Åª¬π.toReal (c * |t|) 1 _ _ _ _ _ (inv_pos_of_pos cpos)).1
    rw [‚Üê mul_assoc]
    show (c‚Åª¬π * c).toReal * |t| < c‚Åª¬π * 1
    simp [@inv_mul_cancel_of_invertible _ _ _ (invertibleOfNonzero cpos.ne.symm), ht]
  ¬∑ have : x - y = t ‚Ä¢ v y - t ‚Ä¢ v x := by
      rw [sub_eq_sub_iff_add_eq_add, add_comm _ y]
      exact hxy
    rw [this, ‚Üê smul_sub, norm_smul]
    by_cases ht0 : t = 0
    ¬∑ rw [ht0]
      simp
    ¬∑ -- apply le_trans ((mul_le_mul_left (abs_pos.2 ht0)).2 (hc hy hx))
      sorry

/- f t est diff√©rentiable -/
lemma Diff_ft : ‚àÄ t : ‚Ñù, Differentiable ‚Ñù (f t) := by
  sorry

/- diff√©rentielle de f t en x -/
local notation "f'" =>
  fun (t : ‚Ñù) (x : E n) ‚Ü¶ (ContinuousLinearMap.id ‚Ñù (E n)) + (t ‚Ä¢ (fderiv ‚Ñù v x))
/- noncomputable def f' (t : ‚Ñù) (x : E n) :=
  (ContinuousLinearMap.id ‚Ñù _) + (t ‚Ä¢ (fderiv ‚Ñù v x)) -/

/- f' t x est la diff√©rentielle de f t en x ‚àà A -/
lemma ftDeriv (t : ‚Ñù) : ‚àÄ x ‚àà A, HasFDerivWithinAt (f t) (f' t x) A x :=
  fun x _ => ((hasFDerivAt_id x).add
    ((vContDiff.differentiable le_rfl).differentiableAt.hasFDerivAt.const_smul t)).hasFDerivWithinAt

/- f' t x est la diff√©rentielle (stricte) de f t en x -/
lemma ftStrictDeriv (t : ‚Ñù) (x : E n) : HasStrictFDerivAt (f t) (f' t x) x :=
  (hasStrictFDerivAt_id x).add
    ((vContDiff.contDiffAt.hasStrictFDerivAt le_rfl).const_smul t)

local notation "jac_f" =>
  fun (x : E n) ‚Ü¶ LinearMap.toMatrix' (fderiv ‚Ñù v x : E n ‚Üí‚Çó[‚Ñù] E n)

open MeasureTheory

/- A est mesurable -/
lemma meas_A : MeasurableSet A :=
  AComp.isClosed.measurableSet

lemma lintegral_abs_det_f't : ‚àÄ·∂† t in ùìù 0,
    ‚à´‚Åª x in A, ENNReal.ofReal |(f' t x).det| ‚àÇvolume = volume ((f t) '' A) := by
  filter_upwards [@InjOn_A_ft n v A] with t hinj
  exact lintegral_abs_det_fderiv_eq_addHaar_image volume
    (meas_A n AComp) (@ftDeriv n v vContDiff A t) hinj

lemma ft_volume_withDensity_abs_det_f't_eq_volume : ‚àÄ·∂† t in ùìù 0,
    Measure.map (f t) ((volume.restrict A).withDensity fun x => ENNReal.ofReal |(f' t x).det|)
    = volume.restrict ((f t) '' A) := by
  filter_upwards [@InjOn_A_ft n v A] with t hinj
  exact map_withDensity_abs_det_fderiv_eq_addHaar volume
    (meas_A n AComp) (@ftDeriv n v vContDiff A t) hinj (measurable_ft n hv t)

open Polynomial
open Finset
open Matrix

lemma natDegree_det (M : Matrix (Fin n) (Fin n) ‚Ñù[X]) (h : ‚àÄ i j, (M i j).natDegree ‚â§ 1) :
    M.det.natDegree ‚â§ n := by
  rw [det_apply]
  refine le_trans (natDegree_sum_le _ _) ((fold_max_le n).2 ‚ü®zero_le n, fun œÉ _ => ?_‚ü©)
  show natDegree ((Equiv.Perm.sign œÉ).val ‚Ä¢ univ.prod fun i => M (œÉ i) i) ‚â§ n
  rw [‚Üê @intCast_smul ‚Ñù ‚Ñù[X] _ _ _ (Equiv.Perm.sign œÉ) (univ.prod fun i => M (œÉ i) i)]
  refine le_trans (natDegree_smul_le (Equiv.Perm.sign œÉ : ‚Ñù) (univ.prod fun i => M (œÉ i) i))
    (le_trans (natDegree_prod_le _ _) (le_trans (sum_le_sum (fun i _ => h (œÉ i) i)) ?_))
  simp

lemma prod_perm_fixpoint (œÉ : Equiv.Perm (Fin n)) :
    univ.prod (fun i => if œÉ i = i then (1 : ‚Ñù) else 0) = if 1 = œÉ then 1 else 0 := by
  by_cases hœÉ : 1 = œÉ
  ¬∑ simp [‚Üê hœÉ]
  ¬∑ have : ¬¨(‚àÄ i, (1 : Equiv.Perm (Fin n)) i = œÉ i) :=
      not_imp_not.2 Equiv.ext hœÉ
    simp at this
    have ‚ü®j, hj‚ü© := this
    rw [prod_eq_zero (Finset.mem_univ j)]
    ¬∑ simp [eq_false hœÉ]
    ¬∑ simp [eq_false (fun (e : œÉ j = j) => hj (by rw [e]))]

lemma sum_perm_sign_smul_prod_fixpoint : univ.sum (fun (œÉ : Equiv.Perm (Fin n)) =>
    Equiv.Perm.sign œÉ ‚Ä¢ univ.prod (fun i => if œÉ i = i then (1 : ‚Ñù) else 0)) = 1 := by
  have : (fun (œÉ : Equiv.Perm (Fin n)) =>
      Equiv.Perm.sign œÉ ‚Ä¢ univ.prod (fun i => if (œÉ i) = i then (1 : ‚Ñù) else 0))
      = (fun œÉ => if 1 = œÉ then 1 else 0) := by
    ext œÉ
    rw [prod_perm_fixpoint n œÉ, apply_ite (fun Œµ => Equiv.Perm.sign œÉ ‚Ä¢ Œµ)]
    by_cases hœÉ : 1 = œÉ
    ¬∑ simp [‚Üê hœÉ]
    ¬∑ simp [eq_false hœÉ]
  rw [this, sum_ite_eq]
  simp

lemma univ_fin_one_singleton : (univ : Finset (Fin 1)) = {0} := rfl

lemma prod_fin_one {Œ± : Type} [CommMonoid Œ±] (g : Fin 1 ‚Üí Œ±) :
    univ.prod g = g 0 := by
  rw [univ_fin_one_singleton, prod_singleton]

lemma coeff_ite (p : Prop) [Decidable p] (P Q : ‚Ñù[X]) (k : ‚Ñï) :
    (if p then P else Q).coeff k = if p then P.coeff k else Q.coeff k :=
  apply_ite (fun q : ‚Ñù[X] => q.coeff k) p P Q

lemma continuous_coeff_C_mul_X {b : E n ‚Üí ‚Ñù} {k : ‚Ñï} (h : Continuous b) :
    Continuous (fun x => (C (b x) * X).coeff k) := by
  by_cases k_one : k = 1
  ¬∑ have : (fun x => (C (b x) * X).coeff k) = b := by
      ext x
      simp [k_one, coeff_C_mul_X]
    rwa [this]
  ¬∑ have : (fun x => (C (b x) * X).coeff k) = 0 := by
      ext x
      rw [coeff_C_mul_X]
      simp [k_one]
    rw [this]
    exact continuous_zero

lemma C_add_C_mul_X_coeff_0 (a : ‚Ñù) (b : ‚Ñù) : (C a + C b * X).coeff 0 = a := by
  simp [coeff_add, coeff_C, coeff_C_mul_X]

lemma C_add_C_mul_X_coeff_1 (a : ‚Ñù) (b : ‚Ñù) : (C a + C b * X).coeff 1 = b := by
  simp [coeff_add, coeff_C, coeff_C_mul_X]

lemma C_add_C_mul_X_coeff_of_one_lt (a : ‚Ñù) (b : ‚Ñù) (k : ‚Ñï) (hk0 : k ‚â† 0) (hk1 : k ‚â† 1) :
    (C a + C b * X).coeff k = 0 := by
  rw [coeff_add, coeff_C, coeff_C_mul_X]
  simp [hk0, hk1]

lemma continuous_coeff_C_add_C_mul_X {a : ‚Ñù} {b : E n ‚Üí ‚Ñù} {k : ‚Ñï} (h : Continuous b) :
    Continuous (fun x => (C a + C (b x) * X).coeff k) := by
  by_cases hk0 : k = 0
  ¬∑ rw [hk0, funext (fun x => C_add_C_mul_X_coeff_0 _ _)]
    exact continuous_const
  ¬∑ by_cases hk1 : k = 1
    ¬∑ rwa [hk1, funext (fun x => C_add_C_mul_X_coeff_1 _ _)]
    ¬∑ rw [funext (fun x => C_add_C_mul_X_coeff_of_one_lt _ _ k hk0 hk1)]
      exact continuous_const

def my_coe (u : E n ‚ÜíL[‚Ñù] E n) : E n ‚Üí E n := u

lemma continuous_my_coe : Continuous (my_coe n) :=
  sorry

lemma continuous_jac_f_apply {i j : Fin n} :
    Continuous (fun x => jac_f x i j) := by
  simp
  exact (continuous_apply_apply _ _).comp
    ((continuous_my_coe n).comp
    (vContDiff.continuous_fderiv (by rfl)))

lemma ofNat'_val (m : ‚Ñï) (hm : 0 < m) (i : Fin m) : Fin.ofNat' i.val hm = i := by
  apply Fin.eq_of_val_eq
  show i.val % m = i.val
  rw [Nat.mod_eq_of_lt (Fin.prop i)]

lemma univ_Fin_map_val_eq_range (m : ‚Ñï) :
    (univ : Finset (Fin m)).map Fin.valEmbedding = range m := by
  by_cases hm : m = 0
  ¬∑ subst hm
    simp
  ¬∑ ext i
    rw [mem_range, mem_map]
    exact ‚ü®fun ‚ü®j,_,hj‚ü© => by rw [‚Üê hj]; exact (Fin.prop j),
      fun hi => ‚ü®Fin.ofNat' i (pos_iff_ne_zero.2 hm), mem_univ _, Nat.mod_eq_of_lt hi‚ü©‚ü©

lemma prod_univ_Fin_eq_prod_range {Œ± : Type} [CommMonoid Œ±] (m : ‚Ñï) (g : ‚Ñï ‚Üí Œ±) :
    (univ : Finset (Fin m)).prod (fun i => g i.val) = (range m).prod g := by
  rw [‚Üê univ_Fin_map_val_eq_range, prod_map]
  rfl

lemma continuous_coeff_prod (m : ‚Ñï) (hm : 0 < m) (hmn : m ‚â§ n) (k : ‚Ñï)
    (P : Fin n ‚Üí E n ‚Üí ‚Ñù[X]) (hP : ‚àÄ i k', Continuous (fun x => (P i x).coeff k')) :
    Continuous fun x => ((univ : Finset (Fin m)).prod (fun i => P (Fin.ofNat' i n_pos) x)).coeff k := by
  have : (fun x => ((univ : Finset (Fin m)).prod (fun i => P (Fin.ofNat' i n_pos) x)).coeff k)
      = (fun x => ((range m).prod (fun i => P (Fin.ofNat' i n_pos) x)).coeff k) := by
    ext x
    rw [‚Üê prod_univ_Fin_eq_prod_range]
  rw [this]
  induction' m with m ih generalizing k
  ¬∑ simp [coeff_one, continuous_const]
  ¬∑ have : (fun x => ((range m.succ).prod fun i => P (Fin.ofNat' i n_pos) x).coeff k)
        = (fun x => _) := by
      ext x
      rw [range_succ, prod_insert not_mem_range_self, coeff_mul]
    rw [this]
    refine continuous_finset_sum _ (fun Œº _ => (hP _ _).mul ?_)
    by_cases mz : m = 0
    ¬∑ have : (fun x => ((range m).prod fun i => P (Fin.ofNat' i n_pos) x).coeff Œº.2)
          = (fun x => if Œº.2 = 0 then 1 else 0) := by
        ext x
        simp [mz, coeff_one]
      rw [this]
      exact continuous_const
    ¬∑ exact ih (pos_iff_ne_zero.2 mz) (lt_of_lt_of_le (Nat.lt_succ_self m) hmn).le
        Œº.2 (by ext x; rw [‚Üê prod_univ_Fin_eq_prod_range])

lemma continuous_coeff_prod' (k : ‚Ñï) (P : Fin n ‚Üí E n ‚Üí ‚Ñù[X])
    (hP : ‚àÄ i k', Continuous (fun x => (P i x).coeff k')) :
    Continuous fun x => ((univ : Finset (Fin n)).prod (fun i => P i x)).coeff k := by
  have : (fun x => (univ.prod (fun i => P i x)).coeff k)
      = (fun x => ((univ : Finset (Fin n)).prod
      (fun i => P (Fin.ofNat' i n_pos) x)).coeff k) :=
    (funext fun x => congrArg (fun p => coeff p k)
      (congrArg _ (funext fun i => (congrArg (fun j => P j x) (by rw [ofNat'_val])))))
  rw [this]
  exact continuous_coeff_prod _ _ _ n_pos le_rfl _ _ hP

/- LinearMap.toMatrix : √ßa devrait aller
+ det commute avec les morphismes d'algebre -/
/- det (f' t x) est polynomial en t et les coefficients sont continus en x -/
lemma f't_det_poly : ‚àÉ P : E n ‚Üí Polynomial ‚Ñù,
    (‚àÄ x : E n, (P x).natDegree ‚â§ n)
    ‚àß (‚àÄ x : E n, (P x).coeff 0 = 1)
    ‚àß (‚àÄ t : ‚Ñù, ‚àÄ x : E n, (f' t x).det = (P x).eval t)
    ‚àß (‚àÄ k : ‚Ñï, Continuous fun x => (P x).coeff k) := by
    -- ‚àß (‚àÄ k : ‚Ñï, Measurable fun x => (P x).coeff k)
  let P := (fun x =>
    (of (fun i j => (if i = j then 1 else 0) + C (jac_f x i j) * X)).det)
  use P
  constructor
  ¬∑ refine fun x => natDegree_det _ _ (fun i j => ?_)
    rw [of_apply]
    apply le_trans (natDegree_add_le _ _)
    rw [apply_ite natDegree, natDegree_one, natDegree_zero, ite_id, Nat.zero_max]
    apply le_trans natDegree_mul_le
    simp
  ¬∑ constructor
    ¬∑ intro x
      dsimp [P]
      rw [det_apply, finset_sum_coeff, ‚Üê sum_perm_sign_smul_prod_fixpoint]
      apply congrArg
      ext œÉ
      rw [coeff_smul, coeff_zero_prod]
      apply congrArg (fun Œ± => _ ‚Ä¢ univ.prod Œ±)
      ext i
      simp [apply_ite (fun p => coeff p 0)]
    ¬∑ constructor
      ¬∑ intro t x
        show LinearMap.det (f' t x : E n ‚Üí‚Çó[‚Ñù] E n) = eval t (P x)
        have useless : LinearMap.det (f' t x : E n ‚Üí‚Çó[‚Ñù] E n) =
            (LinearMap.toMatrix' (LinearMap.id + t ‚Ä¢ (fderiv ‚Ñù v x : E n ‚Üí‚Çó[‚Ñù] E n))).det := by
          rw [LinearMap.det_toMatrix']
          rfl
        rw [useless]
        simp
        rw [LinearMap.toMatrix'_id]
        have : 1 + t ‚Ä¢ jac_f x = (of (fun i j => ((if i = j then 1 else 0)
            + C (jac_f x i j) * X))).map (eval t) := by
          ext i j
          simp
          rw [one_apply, mul_comm, apply_ite (eval t)]
          simp
        rw [this, ‚Üê coe_evalRingHom, ‚Üê RingHom.mapMatrix_apply (evalRingHom t), ‚Üê RingHom.map_det]
      ¬∑ intro k
        have P_coeff : (fun x => (P x).coeff k)
            = (fun x => univ.sum (fun œÉ => Equiv.Perm.sign œÉ
            ‚Ä¢ (univ.prod (fun i => of (fun i j => (if i = j then 1 else 0)
            + C (jac_f x i j) * X) (œÉ i) i)).coeff k)) := by
          ext x
          dsimp [P]
          rw [det_apply, finset_sum_coeff]
          apply congrArg
          ext œÉ
          simp [coeff_smul]
        rw [P_coeff]
        refine continuous_finset_sum _ (fun œÉ _ => Continuous.const_smul
          (continuous_coeff_prod' _ n_pos _ _ (fun i k' => ?_)) _)
        have : (fun x => (of (fun i j => (if i = j then 1 else 0)
            + C (jac_f x i j) * X) (œÉ i) i).coeff k')
            = (fun x => if k' = 0 then (if œÉ i = i then 1 else 0)
            else (if k' = 1 then jac_f x (œÉ i) i else 0)) := by
          ext x
          rw [of_apply, ‚Üê C_1, ‚Üê C_0, ‚Üê apply_ite C]
          by_cases hk'0 : k' = 0
          ¬∑ rw [hk'0, C_add_C_mul_X_coeff_0]
            simp
          ¬∑ by_cases hk'1 : k' = 1
            ¬∑ rw [hk'1, C_add_C_mul_X_coeff_1]
              simp
            ¬∑ rw [C_add_C_mul_X_coeff_of_one_lt _ _ k' hk'0 hk'1]
              simp [hk'0, hk'1]
        rw [this]
        exact continuous_if_const _ (fun _ => continuous_const)
            (fun _ => continuous_if_const _
            (fun _ => (@continuous_jac_f_apply n v vContDiff _ _))
            (fun _ => continuous_const))


lemma zero_lt_continuous (g : ‚Ñù ‚Üí ‚Ñù) (hg : Continuous g) (h0 : g 0 = 1) : ‚àÄ·∂† t in ùìù 0, 0 < g t :=
  eventually_gt_of_tendsto_gt (by linarith) (hg.tendsto' _ _ rfl)

/- si P 0 = 1 alors P t > 0 pour t assez petit -/
lemma zero_lt_poly (P : Polynomial ‚Ñù) (h0 : P.coeff 0 = 1) : ‚àÄ·∂† t in ùìù 0, 0 < P.eval t := by
  apply zero_lt_continuous P.toContinuousMap P.toContinuousMap.continuous
  simpa [‚Üê P.coeff_zero_eq_eval_zero]

lemma continuous_bound (M : ‚Ñù) :
    Continuous (fun t => 1 - M * (range n).sum fun k => |t| ^ (k + 1)) :=
  continuous_const.sub ((continuous_mul_left M).comp
    (continuous_finset_sum _ (fun _ _ => (continuous_pow _).comp continuous_abs)))

lemma pos_bound (M : ‚Ñù) : ‚àÄ·∂† t in ùìù 0,
    0 < 1 - M * (range n).sum fun k => |t| ^ (k + 1) := by
  apply zero_lt_continuous _ (continuous_bound n M)
  simp

lemma range_bounded (Œπ : ‚Ñï ‚Üí ‚Ñù) (m : ‚Ñï) (hm : m > 0) (hŒπ : Œπ 0 > 0) :
    ‚àÉ M > 0, ‚àÄ k ‚àà range m, Œπ k ‚â§ M :=
  ‚ü®((range m).image Œπ).max' ((nonempty_range_iff.2 (by linarith)).image Œπ),
    by linarith [((range m).image Œπ).le_max' (Œπ 0) (mem_image_of_mem Œπ (mem_range.2 (by linarith)))],
    fun _ hk => le_max' _ _ (mem_image_of_mem Œπ hk)‚ü©

lemma unif_bounded_range_of_bounded {Œ± : Type} (Œπ : ‚Ñï ‚Üí Œ± ‚Üí ‚Ñù) (h : ‚àÄ k, ‚àÉ M, ‚àÄ x, |Œπ k x| ‚â§ M) (m : ‚Ñï) :
    ‚àÉ M, ‚àÄ k ‚àà range m, ‚àÄ x, |Œπ k x| ‚â§ M := by
  induction' m with m hm
  ¬∑ simp
  ¬∑ let ‚ü®M‚ÇÄ, hM‚ÇÄ‚ü© := hm
    let ‚ü®M, hM‚ü© := h m
    use max M M‚ÇÄ
    simp
    intro k k_le_m x
    by_cases hk : k = m
    ¬∑ rw [hk]
      exact Or.inl (hM x)
    ¬∑ exact Or.inr (hM‚ÇÄ k (mem_range.2 (lt_of_le_of_ne (Nat.le_of_lt_succ k_le_m) hk)) x)

lemma useless_lemma (g : ‚Ñï ‚Üí ‚Ñù) (n : ‚Ñï) :
    (range (n + 1)).sum g = (range (1 + n)).sum g := by
  rw [add_comm]

lemma bound_poly (P : E n ‚Üí Polynomial ‚Ñù) (hdeg : ‚àÄ x, (P x).natDegree ‚â§ n)
    (h0 : ‚àÄ x, (P x).coeff 0 = 1) (hcont : ‚àÄ k, Continuous (fun x => (P x).coeff k)) :
    ‚àÉ M, ‚àÄ t : ‚Ñù, ‚àÄ x : A,
    1 - M * ((range n).sum fun k => |t| ^ (k + 1)) ‚â§ (P x).eval t := by
  let continuous_coeff (k : ‚Ñï) : C(A,‚Ñù) := ContinuousMap.restrict A ‚ü®_, hcont k‚ü©
  let bounded_continuous_coeff (k : ‚Ñï) := @BoundedContinuousFunction.mkOfCompact A ‚Ñù _ _ (instComp n AComp) (continuous_coeff k)
  have : ‚àÄ k, ‚àÉ M, ‚àÄ x : A, |(P x).coeff k| ‚â§ M :=
    fun k => ‚ü®‚Äñbounded_continuous_coeff k‚Äñ, fun x => ((bounded_continuous_coeff k).norm_coe_le_norm x)‚ü©
  let ‚ü®M, hM‚ü© := unif_bounded_range_of_bounded (fun k (x : A) => (P x).coeff k) this (m := n + 1)
  have : ‚àÄ t, ‚àÄ x : A, ‚àÄ k ‚àà range n, - M * |t| ^ (k + 1) ‚â§ ((P x).coeff (1 + k)) * t ^ (1 + k) := by
    refine fun t x k hk => le_trans ?_ (neg_abs_le _)
    simp [abs_mul, abs_pow, add_comm]
    by_cases h‚ÇÄ : t = 0
    ¬∑ simp [h‚ÇÄ]
    ¬∑ exact (mul_le_mul_right (pow_pos (abs_pos.2 h‚ÇÄ) _)).2 (hM (k + 1) (mem_range_succ_iff.2 (by linarith [mem_range.1 hk])) x)
  use M
  intro t x
  rw [(P x).eval_eq_sum_range' (lt_of_le_of_lt (hdeg x) (lt_add_one n)),
    useless_lemma, sum_range_add, sum_range_one, h0 x,
    pow_zero, mul_one, sub_eq_neg_add, ‚Üêneg_mul, mul_sum, add_comm]
  exact add_le_add_left (sum_le_sum (this t x)) _

/- det (f' t x) > 0 pour t assez petit -/
lemma zero_lt_det_f't : ‚àÄ·∂† t in ùìù 0, ‚àÄ x : A, 0 < (f' t x).det := by
  have ‚ü®P, hP‚ü© := @f't_det_poly n n_pos v vContDiff
  have ‚ü®M, hM‚ü© := bound_poly n AComp P hP.1 hP.2.1 hP.2.2.2
  filter_upwards [pos_bound n M] with t ht x
  rw [hP.2.2.1 t x]
  exact lt_of_lt_of_le ht (hM t x)

/- |det (f' t x)| est polynomial en t et les coefficients sont continus en x -/
lemma abs_det_f't_poly : ‚àÉ P : E n ‚Üí Polynomial ‚Ñù,
    (‚àÄ x : E n, (P x).natDegree ‚â§ n)
    ‚àß (‚àÄ·∂† t in ùìù 0, ‚àÄ x : A, |(f' t x).det| = (P x).eval t)
    ‚àß (‚àÄ k : ‚Ñï, Continuous fun x => (P x).coeff k) := by
    -- ‚àß (‚àÄ k : ‚Ñï, Measurable fun x => (P x).coeff k) := by
  have ‚ü®P, hP‚ü© := @f't_det_poly n n_pos v vContDiff
  refine ‚ü®P, hP.1, ?_, hP.2.2.2‚ü©
  filter_upwards [@zero_lt_det_f't n n_pos v vContDiff A AComp] with t hpos x
  rw [abs_of_pos (hpos x), hP.2.2.1 t]

lemma cont_abs_det_f't (t : ‚Ñù) : Continuous (fun x => |(f' t x).det|) :=
  continuous_abs.comp (ContinuousLinearMap.continuous_det.comp (continuous_const.add
    (continuous_const.smul (vContDiff.continuous_fderiv (by rfl)))))

lemma nonneg_ae_abs_det_f't (t : ‚Ñù) : 0 ‚â§·µê[volume.restrict A] fun x => |(f' t x).det| := by
  filter_upwards
  simp

/- le volume de (f t)''(A) est polynomial en t -/
lemma vol_ft_A_poly : ‚àÉ P : Polynomial ‚Ñù, ‚àÄ·∂† t in ùìù 0,
    (volume ((f t) '' A)).toReal = (P.eval t) := by
  let ‚ü®P, hP‚ü© := @abs_det_f't_poly n n_pos v vContDiff A AComp
  use (range (n + 1)).sum (fun i => C (‚à´ x in A, (P x).coeff i ‚àÇvolume) * X ^ i)
  filter_upwards [@lintegral_abs_det_f't n v vContDiff A AComp, hP.2.1] with t hInt hP1
  simp [‚Üê hInt, eval_finset_sum,
    ‚Üê integral_eq_lintegral_of_nonneg_ae (nonneg_ae_abs_det_f't n t) (@cont_abs_det_f't n v vContDiff t).aestronglyMeasurable]
  have : A.EqOn (fun x => |(f' t x).det|) (fun x => (range (n + 1)).sum (fun n => (P x).coeff n * t ^ n)) := by
    intro x xA
    simp [hP1 ‚ü®x, xA‚ü©]
    nth_rw 1 [(P x).as_sum_range' (n + 1) (Nat.lt_succ_of_le (hP.1 x))]
    simp [eval_finset_sum]
  have integrable_coeff (i : ‚Ñï) : Integrable (fun x => (P x).coeff i * t ^ i) (volume.restrict A) :=
    ContinuousOn.integrableOn_compact AComp (Continuous.continuousOn ((hP.2.2 i).smul continuous_const))
  rw [set_integral_congr (meas_A n AComp) this, integral_finset_sum _ (fun i _ => integrable_coeff i)]
  have : (fun i => ‚à´ x in A, (P x).coeff i * t ^ i) = (fun i => (‚à´ x in A, (P x).coeff i) * t ^ i) := by
    ext i
    show ‚à´ x in A, (P x).coeff i ‚Ä¢ t ^ i = (‚à´ x in A, (P x).coeff i) ‚Ä¢ t ^ i
    rw [integral_smul_const]
  rw [this]

/- LinearMap.equivOfDetNeZero, toContinuousLinearEquiv -/
/- f' t est une equivalence lin√©aire si t est assez petit -/
@[simps!?]
noncomputable def f't_equiv (t : ‚Ñù) (x : E n) : E n ‚âÉL[‚Ñù] E n where
  toLinearMap := f' t x
  invFun := sorry
  left_inv := sorry
  right_inv := sorry
  continuous_toFun := sorry
  continuous_invFun := sorry

lemma inner_self_v_eq_zero (t : ‚Ñù) (x : E n) : ‚ü™x, t ‚Ä¢ v x‚ü´_‚Ñù = 0 := by
  sorry

lemma im_ft_subset (t : ‚Ñù) : (f t) '' (unitSphere n) ‚äÜ Metric.sphere 0 (Real.sqrt (1 + t*t)) := by
  intro y ‚ü®x, xUnit, hxy‚ü©
  rw [‚Üê hxy]
  simp
  unfold unitSphere at xUnit
  have : ‚Äñx‚Äñ = 1 := by simp at xUnit; assumption
  rw [‚Üê Real.sqrt_mul_self (norm_nonneg _), norm_add_sq_eq_norm_sq_add_norm_sq_real (inner_self_v_eq_zero n t x)]
  rw [this, norm_smul, vUnit x, this]
  simp

lemma rank_EuclideanSpace : FiniteDimensional.finrank ‚Ñù (E n) = n + 1 := by
  sorry

lemma one_lt_rank_EuclideanSpace : 1 < Module.rank ‚Ñù (E n) := by
  apply FiniteDimensional.one_lt_rank_of_one_lt_finrank
  rw [rank_EuclideanSpace]
  linarith

local notation "f_restr" => fun (t : ‚Ñù) ‚Ü¶ Set.restrictPreimage (Metric.sphere 0 (Real.sqrt (1 + t*t))) (f t)

lemma ft_preimage (t : ‚Ñù) : (f t) ‚Åª¬π' (Metric.sphere 0 (Real.sqrt (1 + t*t))) = unitSphere n := by
  sorry

/- Mq f(unitSphere) = f(E) ‚à© Metric.sphere 0 (Real.sqrt (1 + t*t)) puis OK -/
/- f t est ouverte pour t assez petit (th√©or√®me d'inversion globale) -/
lemma ft_open : ‚àÄ·∂† t in ùìù 0, IsOpenMap (f_restr t) := by
  sorry
/-  let ‚ü®Œµ, Œµpos, h‚ü© := @ftStrictDeriv n v /- ??? -/
  use Œµ
  constructor; assumption
  intro t ht
  /- apply open_map_of_strict_fderiv_equiv (ùïú := ‚Ñù) (h t ht) -/
  sorry -/

lemma connected_sphere (t : ‚Ñù) : IsConnected (Metric.sphere (0 : E n) (Real.sqrt (1 + t*t))) :=
  isConnected_sphere (one_lt_rank_EuclideanSpace n n_pos) 0 (Real.sqrt_nonneg (1 + t*t))

lemma im_ft_open : ‚àÄ·∂† t in ùìù 0, IsOpen ((f t) '' (unitSphere n)) := by
  sorry

lemma im_ft_closed : ‚àÄ·∂† t in ùìù 0, IsClosed ((f t) '' (unitSphere n)) := by
  sorry

lemma im_ft : ‚àÄ·∂† t in ùìù 0,
  (f t) '' (unitSphere n) = Metric.sphere 0 (Real.sqrt (1 + t*t)) := by
  sorry

theorem HairyBallDiff : ‚àÉ x, v x = 0 := by
  sorry

end



section

variable (v : E n ‚Üí E n) (hv : IsVectorFieldOnSn n v)

theorem HairyBallTheorem : ‚àÉ x, v x = 0 := by
  sorry

end
