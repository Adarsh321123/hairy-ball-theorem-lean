import Mathlib.Topology.MetricSpace.PseudoMetric
import Mathlib.Topology.Basic
import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.Analysis.Calculus.ContDiff.Defs
import Mathlib.Topology.Category.CompHaus.Basic
import Mathlib.MeasureTheory.Measure.Lebesgue.Basic
import Mathlib.Topology.ContinuousFunction.Polynomial
import Mathlib.MeasureTheory.Function.Jacobian


/- Probl√®mes :
    ¬∑ E := EuclideanSpace ‚Ñù (Fin (n+1))
    ¬∑ f (v := v) t
    ¬∑ ‚àÉ Œµ > 0, ‚àÄ t : ‚Ñù, |t| < Œµ ‚Üí ...   OU   ‚àÄ t : (ùìù 0), ...
-/


variable {n : ‚Ñï}

def unitSphere := Metric.sphere (0 : EuclideanSpace ‚Ñù (Fin (n+1))) 1

class VectorFieldOnSn (v : EuclideanSpace ‚Ñù (Fin (n+1)) ‚Üí EuclideanSpace ‚Ñù (Fin (n+1))) where
  isCont : Continuous v
  isTang : ‚àÄ x : EuclideanSpace ‚Ñù (Fin (n+1)), x ‚àà unitSphere ‚Üí ‚ü™x, (v x)‚ü´_‚Ñù = 0



section

variable {v : EuclideanSpace ‚Ñù (Fin (n+1)) ‚Üí EuclideanSpace ‚Ñù (Fin (n+1))} [VectorFieldOnSn v]
  {vContDiff : ContDiff ‚Ñù 1 v}
  {vUnit : ‚àÄ x : EuclideanSpace ‚Ñù (Fin (n+1)), x ‚àà unitSphere ‚Üí ‚Äñx‚Äñ = 1}
  {A : Set (EuclideanSpace ‚Ñù (Fin (n+1)))} [CompactSpace A]

noncomputable def f (t : ‚Ñù) (x : EuclideanSpace ‚Ñù (Fin (n+1))) := x + t ‚Ä¢ (v x)

lemma vLip : ‚àÉ c > 0, LipschitzOnWith c v A := by
  sorry

lemma ftx_eq_fty {x y : EuclideanSpace ‚Ñù (Fin (n+1))} {hx : x ‚àà A} {hy : y ‚àà A} (h : f (v := v) t x = f (v := v) t y) : x - y = t ‚Ä¢ (v y - v x) := by
  sorry

lemma eq_zero_of_le_self {Œ± t : ‚Ñù} (ht : |t| < 1) (h : Œ± ‚â§ |t| * Œ±) : Œ± = 0 := by
  sorry

lemma ftInj : ‚àÉ Œµ > 0, ‚àÄ t : ‚Ñù, |t| < Œµ ‚Üí A.InjOn (f (v := v) t) := by
  let ‚ü®c, cpos, vlip‚ü© := vLip (v := v) (A := A)
  use c‚Åª¬π
  constructor
  ¬∑ exact inv_pos.mpr cpos
  ¬∑ intro t ht x hx y hy hxy
    apply eq_of_sub_eq_zero
    apply norm_eq_zero.1
    have : |t * c| < 1 := by sorry
    apply eq_zero_of_le_self this
    nth_rw 1 [ftx_eq_fty hxy]
    rw [norm_smul, abs_mul, mul_assoc]
    sorry
    sorry
    sorry
    sorry

lemma vDiff : Differentiable ‚Ñù v :=
  vContDiff.differentiable (PartENat.withTopEquiv_symm_le.mp (Exists.intro (fun a => a) fun _ => Nat.le.refl))

lemma ftDiff : ‚àÄ t : ‚Ñù, Differentiable ‚Ñù (f (v := v) t) := by
  sorry

noncomputable def f' (t : ‚Ñù) (x : EuclideanSpace ‚Ñù (Fin (n+1))) :
  EuclideanSpace ‚Ñù (Fin (n+1)) ‚ÜíL[‚Ñù] EuclideanSpace ‚Ñù (Fin (n+1)) where
  toFun h := h + t ‚Ä¢ (fderiv ‚Ñù v x h)
  map_add' := sorry
  map_smul' := sorry
  cont := sorry

lemma ftDeriv : ‚àÄ t : ‚Ñù, ‚àÄ x ‚àà A, HasFDerivWithinAt (f (v := v) t) (f' (v := v) t x) A x := by sorry

lemma meas_A : MeasurableSet A := by sorry

open MeasureTheory

lemma integral_abs_det_ft : ‚àÉ Œµ > 0, ‚àÄ t : ‚Ñù, |t| < Œµ ‚Üí
  (‚à´‚Åª x in A, ENNReal.ofReal |(f' (v := v) t x).det| ‚àÇvolume) = volume ((f (v := v) t) '' A) := by
  let ‚ü®Œµ, hŒµ, h‚ü© := @ftInj n v A /- ??? -/
  use Œµ
  constructor
  ¬∑ exact hŒµ
  ¬∑ intro t ht
    exact lintegral_abs_det_fderiv_eq_addHaar_image volume meas_A (ftDeriv t) (h t ht)

lemma f't_det_poly : ‚àÄ x : EuclideanSpace ‚Ñù (Fin (n+1)), ‚àÉ P : Polynomial ‚Ñù,
  P.coeff 0 = 1 ‚àß ‚àÄ t : ‚Ñù, (f' (v := v) t x).det = P.toContinuousMap t := by
  sorry

lemma ftVol_poly : ‚àÉ Œµ > 0, ‚àÉ P : Polynomial ‚Ñù, ‚àÄ t : ‚Ñù, |t| < Œµ ‚Üí
  volume ((f (v := v) t) '' A) = ENNReal.ofReal (P.toContinuousMap t) := by
  sorry

lemma ftIm : ‚àÉ Œµ > 0, ‚àÄ t : ‚Ñù, |t| < Œµ ‚Üí
  (f (v := v) t) '' unitSphere = Metric.sphere 0 (Real.sqrt (1 + t*t)) := by
  sorry

theorem HairyBallDiff (hn : Even n) : ‚àÉ x, v x = 0 := by
  sorry

end



section

variable (v : EuclideanSpace ‚Ñù (Fin (n+1)) ‚Üí EuclideanSpace ‚Ñù (Fin (n+1))) [VectorFieldOnSn v]

theorem HairyBallTheorem (hn : Even n) : ‚àÉ x, v x = 0 := by
  sorry

end
